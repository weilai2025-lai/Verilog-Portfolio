module queue(clk,rst_p,enable,push_pop,data_in,data_out,empty,full);
input clk,rst_p,enable,push_pop;
input [3:0]data_in;
output full,empty;
output [3:0]data_out;
reg empty;
reg [2:0]read_idx;
reg [3:0] memory[0:7];
integer i;
assign full = (read_idx == 3'd7);
assign data_out = (empty)? 4'd0:memory[read_idx];


always @(posedge clk or posedge rst_p)
begin
	if(rst_p) begin
		read_idx <= 'd0;
		empty <= 'd1;
	end
	else begin
		if(enable) begin
			if(push_pop) begin
				if(!full) begin
					for(i=0; i<7; i=i+1) begin
						memory[i+1] <= memory[i];
					end
					if(empty) begin
						read_idx <= 3'd0;
						empty <= 'd0;
					end
					else begin
						read_idx = (full)?3'd7:read_idx+3'd1;
				end
			end
			else begin
				if(empty) begin
					read_idx <= 'd0;
				end
				else begin
					empty <= (read_idx == 3'd0);
					read_idx <= (read_idx == 3'd0)? 3'd0:read_idx-3'd1;
				end
			end
		end
	end
end

endmodule


	