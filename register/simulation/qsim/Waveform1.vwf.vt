// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/29/2025 12:54:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    register
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module register_vlg_sample_tst(
	clk,
	data,
	en,
	rst_p,
	sampler_tx
);
input  clk;
input [3:0] data;
input [7:0] en;
input  rst_p;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data or en or rst_p)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module register_vlg_check_tst (
	addA,
	addB,
	sampler_rx
);
input [15:0] addA;
input [15:0] addB;
input sampler_rx;

reg [15:0] addA_expected;
reg [15:0] addB_expected;

reg [15:0] addA_prev;
reg [15:0] addB_prev;

reg [15:0] addA_expected_prev;
reg [15:0] addB_expected_prev;

reg [15:0] last_addA_exp;
reg [15:0] last_addB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	addA_prev = addA;
	addB_prev = addB;
end

// update expected /o prevs

always @(trigger)
begin
	addA_expected_prev = addA_expected;
	addB_expected_prev = addB_expected;
end


// expected addA[ 15 ]
initial
begin
	addA_expected[15] = 1'bX;
end 
// expected addA[ 14 ]
initial
begin
	addA_expected[14] = 1'bX;
end 
// expected addA[ 13 ]
initial
begin
	addA_expected[13] = 1'bX;
end 
// expected addA[ 12 ]
initial
begin
	addA_expected[12] = 1'bX;
end 
// expected addA[ 11 ]
initial
begin
	addA_expected[11] = 1'bX;
end 
// expected addA[ 10 ]
initial
begin
	addA_expected[10] = 1'bX;
end 
// expected addA[ 9 ]
initial
begin
	addA_expected[9] = 1'bX;
end 
// expected addA[ 8 ]
initial
begin
	addA_expected[8] = 1'bX;
end 
// expected addA[ 7 ]
initial
begin
	addA_expected[7] = 1'bX;
end 
// expected addA[ 6 ]
initial
begin
	addA_expected[6] = 1'bX;
end 
// expected addA[ 5 ]
initial
begin
	addA_expected[5] = 1'bX;
end 
// expected addA[ 4 ]
initial
begin
	addA_expected[4] = 1'bX;
end 
// expected addA[ 3 ]
initial
begin
	addA_expected[3] = 1'bX;
end 
// expected addA[ 2 ]
initial
begin
	addA_expected[2] = 1'bX;
end 
// expected addA[ 1 ]
initial
begin
	addA_expected[1] = 1'bX;
end 
// expected addA[ 0 ]
initial
begin
	addA_expected[0] = 1'bX;
end 
// expected addB[ 15 ]
initial
begin
	addB_expected[15] = 1'bX;
end 
// expected addB[ 14 ]
initial
begin
	addB_expected[14] = 1'bX;
end 
// expected addB[ 13 ]
initial
begin
	addB_expected[13] = 1'bX;
end 
// expected addB[ 12 ]
initial
begin
	addB_expected[12] = 1'bX;
end 
// expected addB[ 11 ]
initial
begin
	addB_expected[11] = 1'bX;
end 
// expected addB[ 10 ]
initial
begin
	addB_expected[10] = 1'bX;
end 
// expected addB[ 9 ]
initial
begin
	addB_expected[9] = 1'bX;
end 
// expected addB[ 8 ]
initial
begin
	addB_expected[8] = 1'bX;
end 
// expected addB[ 7 ]
initial
begin
	addB_expected[7] = 1'bX;
end 
// expected addB[ 6 ]
initial
begin
	addB_expected[6] = 1'bX;
end 
// expected addB[ 5 ]
initial
begin
	addB_expected[5] = 1'bX;
end 
// expected addB[ 4 ]
initial
begin
	addB_expected[4] = 1'bX;
end 
// expected addB[ 3 ]
initial
begin
	addB_expected[3] = 1'bX;
end 
// expected addB[ 2 ]
initial
begin
	addB_expected[2] = 1'bX;
end 
// expected addB[ 1 ]
initial
begin
	addB_expected[1] = 1'bX;
end 
// expected addB[ 0 ]
initial
begin
	addB_expected[0] = 1'bX;
end 
// generate trigger
always @(addA_expected or addA or addB_expected or addB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected addA = %b | expected addB = %b | ",addA_expected_prev,addB_expected_prev);
	$display("| real addA = %b | real addB = %b | ",addA_prev,addB_prev);
`endif
	if (
		( addA_expected_prev[0] !== 1'bx ) && ( addA_prev[0] !== addA_expected_prev[0] )
		&& ((addA_expected_prev[0] !== last_addA_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addA_expected_prev);
		$display ("     Real value = %b", addA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addA_exp[0] = addA_expected_prev[0];
	end
	if (
		( addA_expected_prev[1] !== 1'bx ) && ( addA_prev[1] !== addA_expected_prev[1] )
		&& ((addA_expected_prev[1] !== last_addA_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addA_expected_prev);
		$display ("     Real value = %b", addA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addA_exp[1] = addA_expected_prev[1];
	end
	if (
		( addA_expected_prev[2] !== 1'bx ) && ( addA_prev[2] !== addA_expected_prev[2] )
		&& ((addA_expected_prev[2] !== last_addA_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addA_expected_prev);
		$display ("     Real value = %b", addA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addA_exp[2] = addA_expected_prev[2];
	end
	if (
		( addA_expected_prev[3] !== 1'bx ) && ( addA_prev[3] !== addA_expected_prev[3] )
		&& ((addA_expected_prev[3] !== last_addA_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addA_expected_prev);
		$display ("     Real value = %b", addA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addA_exp[3] = addA_expected_prev[3];
	end
	if (
		( addA_expected_prev[4] !== 1'bx ) && ( addA_prev[4] !== addA_expected_prev[4] )
		&& ((addA_expected_prev[4] !== last_addA_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addA_expected_prev);
		$display ("     Real value = %b", addA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addA_exp[4] = addA_expected_prev[4];
	end
	if (
		( addA_expected_prev[5] !== 1'bx ) && ( addA_prev[5] !== addA_expected_prev[5] )
		&& ((addA_expected_prev[5] !== last_addA_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addA_expected_prev);
		$display ("     Real value = %b", addA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addA_exp[5] = addA_expected_prev[5];
	end
	if (
		( addA_expected_prev[6] !== 1'bx ) && ( addA_prev[6] !== addA_expected_prev[6] )
		&& ((addA_expected_prev[6] !== last_addA_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addA_expected_prev);
		$display ("     Real value = %b", addA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addA_exp[6] = addA_expected_prev[6];
	end
	if (
		( addA_expected_prev[7] !== 1'bx ) && ( addA_prev[7] !== addA_expected_prev[7] )
		&& ((addA_expected_prev[7] !== last_addA_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addA_expected_prev);
		$display ("     Real value = %b", addA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addA_exp[7] = addA_expected_prev[7];
	end
	if (
		( addA_expected_prev[8] !== 1'bx ) && ( addA_prev[8] !== addA_expected_prev[8] )
		&& ((addA_expected_prev[8] !== last_addA_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addA_expected_prev);
		$display ("     Real value = %b", addA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addA_exp[8] = addA_expected_prev[8];
	end
	if (
		( addA_expected_prev[9] !== 1'bx ) && ( addA_prev[9] !== addA_expected_prev[9] )
		&& ((addA_expected_prev[9] !== last_addA_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addA_expected_prev);
		$display ("     Real value = %b", addA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addA_exp[9] = addA_expected_prev[9];
	end
	if (
		( addA_expected_prev[10] !== 1'bx ) && ( addA_prev[10] !== addA_expected_prev[10] )
		&& ((addA_expected_prev[10] !== last_addA_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addA_expected_prev);
		$display ("     Real value = %b", addA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addA_exp[10] = addA_expected_prev[10];
	end
	if (
		( addA_expected_prev[11] !== 1'bx ) && ( addA_prev[11] !== addA_expected_prev[11] )
		&& ((addA_expected_prev[11] !== last_addA_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addA_expected_prev);
		$display ("     Real value = %b", addA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addA_exp[11] = addA_expected_prev[11];
	end
	if (
		( addA_expected_prev[12] !== 1'bx ) && ( addA_prev[12] !== addA_expected_prev[12] )
		&& ((addA_expected_prev[12] !== last_addA_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addA_expected_prev);
		$display ("     Real value = %b", addA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addA_exp[12] = addA_expected_prev[12];
	end
	if (
		( addA_expected_prev[13] !== 1'bx ) && ( addA_prev[13] !== addA_expected_prev[13] )
		&& ((addA_expected_prev[13] !== last_addA_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addA_expected_prev);
		$display ("     Real value = %b", addA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addA_exp[13] = addA_expected_prev[13];
	end
	if (
		( addA_expected_prev[14] !== 1'bx ) && ( addA_prev[14] !== addA_expected_prev[14] )
		&& ((addA_expected_prev[14] !== last_addA_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addA_expected_prev);
		$display ("     Real value = %b", addA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addA_exp[14] = addA_expected_prev[14];
	end
	if (
		( addA_expected_prev[15] !== 1'bx ) && ( addA_prev[15] !== addA_expected_prev[15] )
		&& ((addA_expected_prev[15] !== last_addA_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addA_expected_prev);
		$display ("     Real value = %b", addA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addA_exp[15] = addA_expected_prev[15];
	end
	if (
		( addB_expected_prev[0] !== 1'bx ) && ( addB_prev[0] !== addB_expected_prev[0] )
		&& ((addB_expected_prev[0] !== last_addB_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addB_expected_prev);
		$display ("     Real value = %b", addB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_addB_exp[0] = addB_expected_prev[0];
	end
	if (
		( addB_expected_prev[1] !== 1'bx ) && ( addB_prev[1] !== addB_expected_prev[1] )
		&& ((addB_expected_prev[1] !== last_addB_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addB_expected_prev);
		$display ("     Real value = %b", addB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_addB_exp[1] = addB_expected_prev[1];
	end
	if (
		( addB_expected_prev[2] !== 1'bx ) && ( addB_prev[2] !== addB_expected_prev[2] )
		&& ((addB_expected_prev[2] !== last_addB_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addB_expected_prev);
		$display ("     Real value = %b", addB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_addB_exp[2] = addB_expected_prev[2];
	end
	if (
		( addB_expected_prev[3] !== 1'bx ) && ( addB_prev[3] !== addB_expected_prev[3] )
		&& ((addB_expected_prev[3] !== last_addB_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addB_expected_prev);
		$display ("     Real value = %b", addB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_addB_exp[3] = addB_expected_prev[3];
	end
	if (
		( addB_expected_prev[4] !== 1'bx ) && ( addB_prev[4] !== addB_expected_prev[4] )
		&& ((addB_expected_prev[4] !== last_addB_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addB_expected_prev);
		$display ("     Real value = %b", addB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_addB_exp[4] = addB_expected_prev[4];
	end
	if (
		( addB_expected_prev[5] !== 1'bx ) && ( addB_prev[5] !== addB_expected_prev[5] )
		&& ((addB_expected_prev[5] !== last_addB_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addB_expected_prev);
		$display ("     Real value = %b", addB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_addB_exp[5] = addB_expected_prev[5];
	end
	if (
		( addB_expected_prev[6] !== 1'bx ) && ( addB_prev[6] !== addB_expected_prev[6] )
		&& ((addB_expected_prev[6] !== last_addB_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addB_expected_prev);
		$display ("     Real value = %b", addB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_addB_exp[6] = addB_expected_prev[6];
	end
	if (
		( addB_expected_prev[7] !== 1'bx ) && ( addB_prev[7] !== addB_expected_prev[7] )
		&& ((addB_expected_prev[7] !== last_addB_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addB_expected_prev);
		$display ("     Real value = %b", addB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_addB_exp[7] = addB_expected_prev[7];
	end
	if (
		( addB_expected_prev[8] !== 1'bx ) && ( addB_prev[8] !== addB_expected_prev[8] )
		&& ((addB_expected_prev[8] !== last_addB_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addB_expected_prev);
		$display ("     Real value = %b", addB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_addB_exp[8] = addB_expected_prev[8];
	end
	if (
		( addB_expected_prev[9] !== 1'bx ) && ( addB_prev[9] !== addB_expected_prev[9] )
		&& ((addB_expected_prev[9] !== last_addB_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addB_expected_prev);
		$display ("     Real value = %b", addB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_addB_exp[9] = addB_expected_prev[9];
	end
	if (
		( addB_expected_prev[10] !== 1'bx ) && ( addB_prev[10] !== addB_expected_prev[10] )
		&& ((addB_expected_prev[10] !== last_addB_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addB_expected_prev);
		$display ("     Real value = %b", addB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_addB_exp[10] = addB_expected_prev[10];
	end
	if (
		( addB_expected_prev[11] !== 1'bx ) && ( addB_prev[11] !== addB_expected_prev[11] )
		&& ((addB_expected_prev[11] !== last_addB_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addB_expected_prev);
		$display ("     Real value = %b", addB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_addB_exp[11] = addB_expected_prev[11];
	end
	if (
		( addB_expected_prev[12] !== 1'bx ) && ( addB_prev[12] !== addB_expected_prev[12] )
		&& ((addB_expected_prev[12] !== last_addB_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addB_expected_prev);
		$display ("     Real value = %b", addB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_addB_exp[12] = addB_expected_prev[12];
	end
	if (
		( addB_expected_prev[13] !== 1'bx ) && ( addB_prev[13] !== addB_expected_prev[13] )
		&& ((addB_expected_prev[13] !== last_addB_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addB_expected_prev);
		$display ("     Real value = %b", addB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_addB_exp[13] = addB_expected_prev[13];
	end
	if (
		( addB_expected_prev[14] !== 1'bx ) && ( addB_prev[14] !== addB_expected_prev[14] )
		&& ((addB_expected_prev[14] !== last_addB_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addB_expected_prev);
		$display ("     Real value = %b", addB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_addB_exp[14] = addB_expected_prev[14];
	end
	if (
		( addB_expected_prev[15] !== 1'bx ) && ( addB_prev[15] !== addB_expected_prev[15] )
		&& ((addB_expected_prev[15] !== last_addB_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addB_expected_prev);
		$display ("     Real value = %b", addB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_addB_exp[15] = addB_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module register_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] data;
reg [7:0] en;
reg rst_p;
// wires                                               
wire [15:0] addA;
wire [15:0] addB;

wire sampler;                             

// assign statements (if any)                          
register i1 (
// port map - connection between master ports and signals/registers   
	.addA(addA),
	.addB(addB),
	.clk(clk),
	.data(data),
	.en(en),
	.rst_p(rst_p)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
	data[3] = #30000 1'b1;
	data[3] = #40000 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
	data[2] = #30000 1'b1;
	data[2] = #40000 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
end 
// en[ 7 ]
initial
begin
	en[7] = 1'b0;
end 
// en[ 6 ]
initial
begin
	en[6] = 1'b0;
end 
// en[ 5 ]
initial
begin
	en[5] = 1'b0;
end 
// en[ 4 ]
initial
begin
	en[4] = 1'b0;
end 
// en[ 3 ]
initial
begin
	en[3] = 1'b0;
end 
// en[ 2 ]
initial
begin
	en[2] = 1'b0;
end 
// en[ 1 ]
initial
begin
	en[1] = 1'b0;
end 
// en[ 0 ]
initial
begin
	en[0] = 1'b0;
	en[0] = #30000 1'b1;
	en[0] = #40000 1'b0;
end 

// rst_p
initial
begin
	rst_p = 1'b1;
	rst_p = #10000 1'b0;
end 

register_vlg_sample_tst tb_sample (
	.clk(clk),
	.data(data),
	.en(en),
	.rst_p(rst_p),
	.sampler_tx(sampler)
);

register_vlg_check_tst tb_out(
	.addA(addA),
	.addB(addB),
	.sampler_rx(sampler)
);
endmodule

