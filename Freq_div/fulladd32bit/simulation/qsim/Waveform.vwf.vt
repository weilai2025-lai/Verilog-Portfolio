// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/22/2025 16:38:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    fulladd32bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fulladd32bit_vlg_sample_tst(
	a,
	b,
	cin,
	sampler_tx
);
input [31:0] a;
input [31:0] b;
input  cin;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or cin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module fulladd32bit_vlg_check_tst (
	cout,
	s,
	sampler_rx
);
input  cout;
input [31:0] s;
input sampler_rx;

reg  cout_expected;
reg [31:0] s_expected;

reg  cout_prev;
reg [31:0] s_prev;

reg  cout_expected_prev;
reg [31:0] s_expected_prev;

reg  last_cout_exp;
reg [31:0] last_s_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	cout_prev = cout;
	s_prev = s;
end

// update expected /o prevs

always @(trigger)
begin
	cout_expected_prev = cout_expected;
	s_expected_prev = s_expected;
end



// expected cout
initial
begin
	cout_expected = 1'bX;
end 
// expected s[ 31 ]
initial
begin
	s_expected[31] = 1'bX;
end 
// expected s[ 30 ]
initial
begin
	s_expected[30] = 1'bX;
end 
// expected s[ 29 ]
initial
begin
	s_expected[29] = 1'bX;
end 
// expected s[ 28 ]
initial
begin
	s_expected[28] = 1'bX;
end 
// expected s[ 27 ]
initial
begin
	s_expected[27] = 1'bX;
end 
// expected s[ 26 ]
initial
begin
	s_expected[26] = 1'bX;
end 
// expected s[ 25 ]
initial
begin
	s_expected[25] = 1'bX;
end 
// expected s[ 24 ]
initial
begin
	s_expected[24] = 1'bX;
end 
// expected s[ 23 ]
initial
begin
	s_expected[23] = 1'bX;
end 
// expected s[ 22 ]
initial
begin
	s_expected[22] = 1'bX;
end 
// expected s[ 21 ]
initial
begin
	s_expected[21] = 1'bX;
end 
// expected s[ 20 ]
initial
begin
	s_expected[20] = 1'bX;
end 
// expected s[ 19 ]
initial
begin
	s_expected[19] = 1'bX;
end 
// expected s[ 18 ]
initial
begin
	s_expected[18] = 1'bX;
end 
// expected s[ 17 ]
initial
begin
	s_expected[17] = 1'bX;
end 
// expected s[ 16 ]
initial
begin
	s_expected[16] = 1'bX;
end 
// expected s[ 15 ]
initial
begin
	s_expected[15] = 1'bX;
end 
// expected s[ 14 ]
initial
begin
	s_expected[14] = 1'bX;
end 
// expected s[ 13 ]
initial
begin
	s_expected[13] = 1'bX;
end 
// expected s[ 12 ]
initial
begin
	s_expected[12] = 1'bX;
end 
// expected s[ 11 ]
initial
begin
	s_expected[11] = 1'bX;
end 
// expected s[ 10 ]
initial
begin
	s_expected[10] = 1'bX;
end 
// expected s[ 9 ]
initial
begin
	s_expected[9] = 1'bX;
end 
// expected s[ 8 ]
initial
begin
	s_expected[8] = 1'bX;
end 
// expected s[ 7 ]
initial
begin
	s_expected[7] = 1'bX;
end 
// expected s[ 6 ]
initial
begin
	s_expected[6] = 1'bX;
end 
// expected s[ 5 ]
initial
begin
	s_expected[5] = 1'bX;
end 
// expected s[ 4 ]
initial
begin
	s_expected[4] = 1'bX;
end 
// expected s[ 3 ]
initial
begin
	s_expected[3] = 1'bX;
end 
// expected s[ 2 ]
initial
begin
	s_expected[2] = 1'bX;
end 
// expected s[ 1 ]
initial
begin
	s_expected[1] = 1'bX;
end 
// expected s[ 0 ]
initial
begin
	s_expected[0] = 1'bX;
end 
// generate trigger
always @(cout_expected or cout or s_expected or s)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cout = %b | expected s = %b | ",cout_expected_prev,s_expected_prev);
	$display("| real cout = %b | real s = %b | ",cout_prev,s_prev);
`endif
	if (
		( cout_expected_prev !== 1'bx ) && ( cout_prev !== cout_expected_prev )
		&& ((cout_expected_prev !== last_cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cout_expected_prev);
		$display ("     Real value = %b", cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cout_exp = cout_expected_prev;
	end
	if (
		( s_expected_prev[0] !== 1'bx ) && ( s_prev[0] !== s_expected_prev[0] )
		&& ((s_expected_prev[0] !== last_s_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[0] = s_expected_prev[0];
	end
	if (
		( s_expected_prev[1] !== 1'bx ) && ( s_prev[1] !== s_expected_prev[1] )
		&& ((s_expected_prev[1] !== last_s_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[1] = s_expected_prev[1];
	end
	if (
		( s_expected_prev[2] !== 1'bx ) && ( s_prev[2] !== s_expected_prev[2] )
		&& ((s_expected_prev[2] !== last_s_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[2] = s_expected_prev[2];
	end
	if (
		( s_expected_prev[3] !== 1'bx ) && ( s_prev[3] !== s_expected_prev[3] )
		&& ((s_expected_prev[3] !== last_s_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[3] = s_expected_prev[3];
	end
	if (
		( s_expected_prev[4] !== 1'bx ) && ( s_prev[4] !== s_expected_prev[4] )
		&& ((s_expected_prev[4] !== last_s_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[4] = s_expected_prev[4];
	end
	if (
		( s_expected_prev[5] !== 1'bx ) && ( s_prev[5] !== s_expected_prev[5] )
		&& ((s_expected_prev[5] !== last_s_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[5] = s_expected_prev[5];
	end
	if (
		( s_expected_prev[6] !== 1'bx ) && ( s_prev[6] !== s_expected_prev[6] )
		&& ((s_expected_prev[6] !== last_s_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[6] = s_expected_prev[6];
	end
	if (
		( s_expected_prev[7] !== 1'bx ) && ( s_prev[7] !== s_expected_prev[7] )
		&& ((s_expected_prev[7] !== last_s_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[7] = s_expected_prev[7];
	end
	if (
		( s_expected_prev[8] !== 1'bx ) && ( s_prev[8] !== s_expected_prev[8] )
		&& ((s_expected_prev[8] !== last_s_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[8] = s_expected_prev[8];
	end
	if (
		( s_expected_prev[9] !== 1'bx ) && ( s_prev[9] !== s_expected_prev[9] )
		&& ((s_expected_prev[9] !== last_s_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[9] = s_expected_prev[9];
	end
	if (
		( s_expected_prev[10] !== 1'bx ) && ( s_prev[10] !== s_expected_prev[10] )
		&& ((s_expected_prev[10] !== last_s_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[10] = s_expected_prev[10];
	end
	if (
		( s_expected_prev[11] !== 1'bx ) && ( s_prev[11] !== s_expected_prev[11] )
		&& ((s_expected_prev[11] !== last_s_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[11] = s_expected_prev[11];
	end
	if (
		( s_expected_prev[12] !== 1'bx ) && ( s_prev[12] !== s_expected_prev[12] )
		&& ((s_expected_prev[12] !== last_s_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[12] = s_expected_prev[12];
	end
	if (
		( s_expected_prev[13] !== 1'bx ) && ( s_prev[13] !== s_expected_prev[13] )
		&& ((s_expected_prev[13] !== last_s_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[13] = s_expected_prev[13];
	end
	if (
		( s_expected_prev[14] !== 1'bx ) && ( s_prev[14] !== s_expected_prev[14] )
		&& ((s_expected_prev[14] !== last_s_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[14] = s_expected_prev[14];
	end
	if (
		( s_expected_prev[15] !== 1'bx ) && ( s_prev[15] !== s_expected_prev[15] )
		&& ((s_expected_prev[15] !== last_s_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[15] = s_expected_prev[15];
	end
	if (
		( s_expected_prev[16] !== 1'bx ) && ( s_prev[16] !== s_expected_prev[16] )
		&& ((s_expected_prev[16] !== last_s_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[16] = s_expected_prev[16];
	end
	if (
		( s_expected_prev[17] !== 1'bx ) && ( s_prev[17] !== s_expected_prev[17] )
		&& ((s_expected_prev[17] !== last_s_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[17] = s_expected_prev[17];
	end
	if (
		( s_expected_prev[18] !== 1'bx ) && ( s_prev[18] !== s_expected_prev[18] )
		&& ((s_expected_prev[18] !== last_s_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[18] = s_expected_prev[18];
	end
	if (
		( s_expected_prev[19] !== 1'bx ) && ( s_prev[19] !== s_expected_prev[19] )
		&& ((s_expected_prev[19] !== last_s_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[19] = s_expected_prev[19];
	end
	if (
		( s_expected_prev[20] !== 1'bx ) && ( s_prev[20] !== s_expected_prev[20] )
		&& ((s_expected_prev[20] !== last_s_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[20] = s_expected_prev[20];
	end
	if (
		( s_expected_prev[21] !== 1'bx ) && ( s_prev[21] !== s_expected_prev[21] )
		&& ((s_expected_prev[21] !== last_s_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[21] = s_expected_prev[21];
	end
	if (
		( s_expected_prev[22] !== 1'bx ) && ( s_prev[22] !== s_expected_prev[22] )
		&& ((s_expected_prev[22] !== last_s_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[22] = s_expected_prev[22];
	end
	if (
		( s_expected_prev[23] !== 1'bx ) && ( s_prev[23] !== s_expected_prev[23] )
		&& ((s_expected_prev[23] !== last_s_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[23] = s_expected_prev[23];
	end
	if (
		( s_expected_prev[24] !== 1'bx ) && ( s_prev[24] !== s_expected_prev[24] )
		&& ((s_expected_prev[24] !== last_s_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[24] = s_expected_prev[24];
	end
	if (
		( s_expected_prev[25] !== 1'bx ) && ( s_prev[25] !== s_expected_prev[25] )
		&& ((s_expected_prev[25] !== last_s_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[25] = s_expected_prev[25];
	end
	if (
		( s_expected_prev[26] !== 1'bx ) && ( s_prev[26] !== s_expected_prev[26] )
		&& ((s_expected_prev[26] !== last_s_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[26] = s_expected_prev[26];
	end
	if (
		( s_expected_prev[27] !== 1'bx ) && ( s_prev[27] !== s_expected_prev[27] )
		&& ((s_expected_prev[27] !== last_s_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[27] = s_expected_prev[27];
	end
	if (
		( s_expected_prev[28] !== 1'bx ) && ( s_prev[28] !== s_expected_prev[28] )
		&& ((s_expected_prev[28] !== last_s_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[28] = s_expected_prev[28];
	end
	if (
		( s_expected_prev[29] !== 1'bx ) && ( s_prev[29] !== s_expected_prev[29] )
		&& ((s_expected_prev[29] !== last_s_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[29] = s_expected_prev[29];
	end
	if (
		( s_expected_prev[30] !== 1'bx ) && ( s_prev[30] !== s_expected_prev[30] )
		&& ((s_expected_prev[30] !== last_s_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[30] = s_expected_prev[30];
	end
	if (
		( s_expected_prev[31] !== 1'bx ) && ( s_prev[31] !== s_expected_prev[31] )
		&& ((s_expected_prev[31] !== last_s_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[31] = s_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module fulladd32bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] a;
reg [31:0] b;
reg cin;
// wires                                               
wire cout;
wire [31:0] s;

wire sampler;                             

// assign statements (if any)                          
fulladd32bit i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.cin(cin),
	.cout(cout),
	.s(s)
);
// a[ 31 ]
initial
begin
	a[31] = 1'b1;
	a[31] = #10000 1'b0;
end 
// a[ 30 ]
initial
begin
	a[30] = 1'b1;
	a[30] = #10000 1'b0;
end 
// a[ 29 ]
initial
begin
	a[29] = 1'b0;
end 
// a[ 28 ]
initial
begin
	a[28] = 1'b0;
end 
// a[ 27 ]
initial
begin
	a[27] = 1'b0;
end 
// a[ 26 ]
initial
begin
	a[26] = 1'b0;
end 
// a[ 25 ]
initial
begin
	a[25] = 1'b0;
end 
// a[ 24 ]
initial
begin
	a[24] = 1'b0;
end 
// a[ 23 ]
initial
begin
	a[23] = 1'b0;
end 
// a[ 22 ]
initial
begin
	a[22] = 1'b0;
end 
// a[ 21 ]
initial
begin
	a[21] = 1'b0;
end 
// a[ 20 ]
initial
begin
	a[20] = 1'b0;
end 
// a[ 19 ]
initial
begin
	a[19] = 1'b0;
end 
// a[ 18 ]
initial
begin
	a[18] = 1'b0;
end 
// a[ 17 ]
initial
begin
	a[17] = 1'b0;
end 
// a[ 16 ]
initial
begin
	a[16] = 1'b0;
end 
// a[ 15 ]
initial
begin
	a[15] = 1'b0;
end 
// a[ 14 ]
initial
begin
	a[14] = 1'b0;
end 
// a[ 13 ]
initial
begin
	a[13] = 1'b0;
end 
// a[ 12 ]
initial
begin
	a[12] = 1'b0;
end 
// a[ 11 ]
initial
begin
	a[11] = 1'b0;
end 
// a[ 10 ]
initial
begin
	a[10] = 1'b0;
end 
// a[ 9 ]
initial
begin
	a[9] = 1'b0;
end 
// a[ 8 ]
initial
begin
	a[8] = 1'b0;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
end 
// b[ 31 ]
initial
begin
	b[31] = 1'b0;
end 
// b[ 30 ]
initial
begin
	b[30] = 1'b0;
end 
// b[ 29 ]
initial
begin
	b[29] = 1'b0;
end 
// b[ 28 ]
initial
begin
	b[28] = 1'b0;
end 
// b[ 27 ]
initial
begin
	b[27] = 1'b0;
end 
// b[ 26 ]
initial
begin
	b[26] = 1'b0;
end 
// b[ 25 ]
initial
begin
	b[25] = 1'b0;
end 
// b[ 24 ]
initial
begin
	b[24] = 1'b0;
end 
// b[ 23 ]
initial
begin
	b[23] = 1'b0;
end 
// b[ 22 ]
initial
begin
	b[22] = 1'b0;
end 
// b[ 21 ]
initial
begin
	b[21] = 1'b0;
end 
// b[ 20 ]
initial
begin
	b[20] = 1'b0;
end 
// b[ 19 ]
initial
begin
	b[19] = 1'b0;
end 
// b[ 18 ]
initial
begin
	b[18] = 1'b1;
	b[18] = #10000 1'b0;
end 
// b[ 17 ]
initial
begin
	b[17] = 1'b1;
	b[17] = #10000 1'b0;
end 
// b[ 16 ]
initial
begin
	b[16] = 1'b1;
	b[16] = #10000 1'b0;
end 
// b[ 15 ]
initial
begin
	b[15] = 1'b0;
end 
// b[ 14 ]
initial
begin
	b[14] = 1'b0;
end 
// b[ 13 ]
initial
begin
	b[13] = 1'b0;
end 
// b[ 12 ]
initial
begin
	b[12] = 1'b0;
end 
// b[ 11 ]
initial
begin
	b[11] = 1'b0;
end 
// b[ 10 ]
initial
begin
	b[10] = 1'b0;
end 
// b[ 9 ]
initial
begin
	b[9] = 1'b0;
end 
// b[ 8 ]
initial
begin
	b[8] = 1'b0;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b0;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b0;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
end 

// cin
initial
begin
	cin = 1'b0;
end 

fulladd32bit_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.cin(cin),
	.sampler_tx(sampler)
);

fulladd32bit_vlg_check_tst tb_out(
	.cout(cout),
	.s(s),
	.sampler_rx(sampler)
);
endmodule

