// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/26/2025 17:34:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    traffic_moore2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module traffic_moore2_vlg_sample_tst(
	clk,
	rst_p,
	sampler_tx
);
input  clk;
input  rst_p;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst_p)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module traffic_moore2_vlg_check_tst (
	count,
	lightA,
	lightB,
	sampler_rx
);
input [3:0] count;
input [2:0] lightA;
input [2:0] lightB;
input sampler_rx;

reg [3:0] count_expected;
reg [2:0] lightA_expected;
reg [2:0] lightB_expected;

reg [3:0] count_prev;
reg [2:0] lightA_prev;
reg [2:0] lightB_prev;

reg [3:0] count_expected_prev;
reg [2:0] lightA_expected_prev;
reg [2:0] lightB_expected_prev;

reg [3:0] last_count_exp;
reg [2:0] last_lightA_exp;
reg [2:0] last_lightB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	count_prev = count;
	lightA_prev = lightA;
	lightB_prev = lightB;
end

// update expected /o prevs

always @(trigger)
begin
	count_expected_prev = count_expected;
	lightA_expected_prev = lightA_expected;
	lightB_expected_prev = lightB_expected;
end


// expected count[ 3 ]
initial
begin
	count_expected[3] = 1'bX;
	count_expected[3] = #159000 1'b0;
end 
// expected count[ 2 ]
initial
begin
	count_expected[2] = 1'bX;
	count_expected[2] = #159000 1'b0;
end 
// expected count[ 1 ]
initial
begin
	count_expected[1] = 1'bX;
	count_expected[1] = #159000 1'b0;
end 
// expected count[ 0 ]
initial
begin
	count_expected[0] = 1'bX;
	count_expected[0] = #159000 1'b0;
end 
// expected lightA[ 2 ]
initial
begin
	lightA_expected[2] = 1'bX;
	lightA_expected[2] = #159000 1'b0;
end 
// expected lightA[ 1 ]
initial
begin
	lightA_expected[1] = 1'bX;
	lightA_expected[1] = #159000 1'b0;
end 
// expected lightA[ 0 ]
initial
begin
	lightA_expected[0] = 1'bX;
	lightA_expected[0] = #159000 1'b0;
end 
// expected lightB[ 2 ]
initial
begin
	lightB_expected[2] = 1'bX;
	lightB_expected[2] = #159000 1'b0;
end 
// expected lightB[ 1 ]
initial
begin
	lightB_expected[1] = 1'bX;
	lightB_expected[1] = #159000 1'b0;
end 
// expected lightB[ 0 ]
initial
begin
	lightB_expected[0] = 1'bX;
	lightB_expected[0] = #159000 1'b0;
end 
// generate trigger
always @(count_expected or count or lightA_expected or lightA or lightB_expected or lightB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected count = %b | expected lightA = %b | expected lightB = %b | ",count_expected_prev,lightA_expected_prev,lightB_expected_prev);
	$display("| real count = %b | real lightA = %b | real lightB = %b | ",count_prev,lightA_prev,lightB_prev);
`endif
	if (
		( count_expected_prev[0] !== 1'bx ) && ( count_prev[0] !== count_expected_prev[0] )
		&& ((count_expected_prev[0] !== last_count_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[0] = count_expected_prev[0];
	end
	if (
		( count_expected_prev[1] !== 1'bx ) && ( count_prev[1] !== count_expected_prev[1] )
		&& ((count_expected_prev[1] !== last_count_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[1] = count_expected_prev[1];
	end
	if (
		( count_expected_prev[2] !== 1'bx ) && ( count_prev[2] !== count_expected_prev[2] )
		&& ((count_expected_prev[2] !== last_count_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[2] = count_expected_prev[2];
	end
	if (
		( count_expected_prev[3] !== 1'bx ) && ( count_prev[3] !== count_expected_prev[3] )
		&& ((count_expected_prev[3] !== last_count_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[3] = count_expected_prev[3];
	end
	if (
		( lightA_expected_prev[0] !== 1'bx ) && ( lightA_prev[0] !== lightA_expected_prev[0] )
		&& ((lightA_expected_prev[0] !== last_lightA_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lightA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lightA_expected_prev);
		$display ("     Real value = %b", lightA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lightA_exp[0] = lightA_expected_prev[0];
	end
	if (
		( lightA_expected_prev[1] !== 1'bx ) && ( lightA_prev[1] !== lightA_expected_prev[1] )
		&& ((lightA_expected_prev[1] !== last_lightA_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lightA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lightA_expected_prev);
		$display ("     Real value = %b", lightA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lightA_exp[1] = lightA_expected_prev[1];
	end
	if (
		( lightA_expected_prev[2] !== 1'bx ) && ( lightA_prev[2] !== lightA_expected_prev[2] )
		&& ((lightA_expected_prev[2] !== last_lightA_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lightA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lightA_expected_prev);
		$display ("     Real value = %b", lightA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lightA_exp[2] = lightA_expected_prev[2];
	end
	if (
		( lightB_expected_prev[0] !== 1'bx ) && ( lightB_prev[0] !== lightB_expected_prev[0] )
		&& ((lightB_expected_prev[0] !== last_lightB_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lightB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lightB_expected_prev);
		$display ("     Real value = %b", lightB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lightB_exp[0] = lightB_expected_prev[0];
	end
	if (
		( lightB_expected_prev[1] !== 1'bx ) && ( lightB_prev[1] !== lightB_expected_prev[1] )
		&& ((lightB_expected_prev[1] !== last_lightB_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lightB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lightB_expected_prev);
		$display ("     Real value = %b", lightB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lightB_exp[1] = lightB_expected_prev[1];
	end
	if (
		( lightB_expected_prev[2] !== 1'bx ) && ( lightB_prev[2] !== lightB_expected_prev[2] )
		&& ((lightB_expected_prev[2] !== last_lightB_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lightB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lightB_expected_prev);
		$display ("     Real value = %b", lightB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lightB_exp[2] = lightB_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module traffic_moore2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst_p;
// wires                                               
wire [3:0] count;
wire [2:0] lightA;
wire [2:0] lightB;

wire sampler;                             

// assign statements (if any)                          
traffic_moore2 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.count(count),
	.lightA(lightA),
	.lightB(lightB),
	.rst_p(rst_p)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst_p
initial
begin
	rst_p = 1'b1;
	rst_p = #6721 1'b0;
end 

traffic_moore2_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst_p(rst_p),
	.sampler_tx(sampler)
);

traffic_moore2_vlg_check_tst tb_out(
	.count(count),
	.lightA(lightA),
	.lightB(lightB),
	.sampler_rx(sampler)
);
endmodule

