// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/08/2025 11:44:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    stack
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module stack_vlg_sample_tst(
	clk,
	data_in,
	enable,
	push_pop,
	rst,
	sampler_tx
);
input  clk;
input [3:0] data_in;
input  enable;
input  push_pop;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data_in or enable or push_pop or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module stack_vlg_check_tst (
	data_out,
	empty,
	full,
	sampler_rx
);
input [3:0] data_out;
input  empty;
input  full;
input sampler_rx;

reg [3:0] data_out_expected;
reg  empty_expected;
reg  full_expected;

reg [3:0] data_out_prev;
reg  empty_prev;
reg  full_prev;

reg [3:0] data_out_expected_prev;
reg  empty_expected_prev;
reg  full_expected_prev;

reg [3:0] last_data_out_exp;
reg  last_empty_exp;
reg  last_full_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	data_out_prev = data_out;
	empty_prev = empty;
	full_prev = full;
end

// update expected /o prevs

always @(trigger)
begin
	data_out_expected_prev = data_out_expected;
	empty_expected_prev = empty_expected;
	full_expected_prev = full_expected;
end



// expected full
initial
begin
	full_expected = 1'bX;
end 

// expected empty
initial
begin
	empty_expected = 1'bX;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 
// generate trigger
always @(data_out_expected or data_out or empty_expected or empty or full_expected or full)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected data_out = %b | expected empty = %b | expected full = %b | ",data_out_expected_prev,empty_expected_prev,full_expected_prev);
	$display("| real data_out = %b | real empty = %b | real full = %b | ",data_out_prev,empty_prev,full_prev);
`endif
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( empty_expected_prev !== 1'bx ) && ( empty_prev !== empty_expected_prev )
		&& ((empty_expected_prev !== last_empty_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port empty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", empty_expected_prev);
		$display ("     Real value = %b", empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_empty_exp = empty_expected_prev;
	end
	if (
		( full_expected_prev !== 1'bx ) && ( full_prev !== full_expected_prev )
		&& ((full_expected_prev !== last_full_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full_expected_prev);
		$display ("     Real value = %b", full_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_full_exp = full_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module stack_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] data_in;
reg enable;
reg push_pop;
reg rst;
// wires                                               
wire [3:0] data_out;
wire empty;
wire full;

wire sampler;                             

// assign statements (if any)                          
stack i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data_in(data_in),
	.data_out(data_out),
	.empty(empty),
	.enable(enable),
	.full(full),
	.push_pop(push_pop),
	.rst(rst)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
	data_in[3] = #20000 1'b1;
	data_in[3] = #20000 1'b0;
	data_in[3] = #40000 1'b1;
	data_in[3] = #20000 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b0;
	data_in[2] = #80000 1'b1;
	data_in[2] = #20000 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
	data_in[1] = #20000 1'b1;
	data_in[1] = #20000 1'b0;
	data_in[1] = #40000 1'b1;
	data_in[1] = #20000 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
	data_in[0] = #80000 1'b1;
	data_in[0] = #20000 1'b0;
end 

// enable
initial
begin
	enable = 1'b0;
	enable = #20000 1'b1;
	enable = #20000 1'b0;
	enable = #40000 1'b1;
	enable = #20000 1'b0;
	enable = #40000 1'b1;
	enable = #20000 1'b0;
end 

// push_pop
initial
begin
	push_pop = 1'b1;
	push_pop = #100000 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #20000 1'b0;
end 

stack_vlg_sample_tst tb_sample (
	.clk(clk),
	.data_in(data_in),
	.enable(enable),
	.push_pop(push_pop),
	.rst(rst),
	.sampler_tx(sampler)
);

stack_vlg_check_tst tb_out(
	.data_out(data_out),
	.empty(empty),
	.full(full),
	.sampler_rx(sampler)
);
endmodule

