// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/21/2025 23:00:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    BCD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BCD_vlg_sample_tst(
	binaryin,
	sampler_tx
);
input [7:0] binaryin;
output sampler_tx;

reg sample;
time current_time;
always @(binaryin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module BCD_vlg_check_tst (
	bcd_hundred,
	bcd_ten,
	bcd_unit,
	sampler_rx
);
input [3:0] bcd_hundred;
input [3:0] bcd_ten;
input [3:0] bcd_unit;
input sampler_rx;

reg [3:0] bcd_hundred_expected;
reg [3:0] bcd_ten_expected;
reg [3:0] bcd_unit_expected;

reg [3:0] bcd_hundred_prev;
reg [3:0] bcd_ten_prev;
reg [3:0] bcd_unit_prev;

reg [3:0] bcd_hundred_expected_prev;
reg [3:0] bcd_ten_expected_prev;
reg [3:0] bcd_unit_expected_prev;

reg [3:0] last_bcd_hundred_exp;
reg [3:0] last_bcd_ten_exp;
reg [3:0] last_bcd_unit_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	bcd_hundred_prev = bcd_hundred;
	bcd_ten_prev = bcd_ten;
	bcd_unit_prev = bcd_unit;
end

// update expected /o prevs

always @(trigger)
begin
	bcd_hundred_expected_prev = bcd_hundred_expected;
	bcd_ten_expected_prev = bcd_ten_expected;
	bcd_unit_expected_prev = bcd_unit_expected;
end


// expected bcd_unit[ 3 ]
initial
begin
	bcd_unit_expected[3] = 1'bX;
end 
// expected bcd_unit[ 2 ]
initial
begin
	bcd_unit_expected[2] = 1'bX;
end 
// expected bcd_unit[ 1 ]
initial
begin
	bcd_unit_expected[1] = 1'bX;
end 
// expected bcd_unit[ 0 ]
initial
begin
	bcd_unit_expected[0] = 1'bX;
end 
// expected bcd_ten[ 3 ]
initial
begin
	bcd_ten_expected[3] = 1'bX;
end 
// expected bcd_ten[ 2 ]
initial
begin
	bcd_ten_expected[2] = 1'bX;
end 
// expected bcd_ten[ 1 ]
initial
begin
	bcd_ten_expected[1] = 1'bX;
end 
// expected bcd_ten[ 0 ]
initial
begin
	bcd_ten_expected[0] = 1'bX;
end 
// expected bcd_hundred[ 3 ]
initial
begin
	bcd_hundred_expected[3] = 1'bX;
end 
// expected bcd_hundred[ 2 ]
initial
begin
	bcd_hundred_expected[2] = 1'bX;
end 
// expected bcd_hundred[ 1 ]
initial
begin
	bcd_hundred_expected[1] = 1'bX;
end 
// expected bcd_hundred[ 0 ]
initial
begin
	bcd_hundred_expected[0] = 1'bX;
end 
// generate trigger
always @(bcd_hundred_expected or bcd_hundred or bcd_ten_expected or bcd_ten or bcd_unit_expected or bcd_unit)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected bcd_hundred = %b | expected bcd_ten = %b | expected bcd_unit = %b | ",bcd_hundred_expected_prev,bcd_ten_expected_prev,bcd_unit_expected_prev);
	$display("| real bcd_hundred = %b | real bcd_ten = %b | real bcd_unit = %b | ",bcd_hundred_prev,bcd_ten_prev,bcd_unit_prev);
`endif
	if (
		( bcd_hundred_expected_prev[0] !== 1'bx ) && ( bcd_hundred_prev[0] !== bcd_hundred_expected_prev[0] )
		&& ((bcd_hundred_expected_prev[0] !== last_bcd_hundred_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_hundred[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_hundred_expected_prev);
		$display ("     Real value = %b", bcd_hundred_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_hundred_exp[0] = bcd_hundred_expected_prev[0];
	end
	if (
		( bcd_hundred_expected_prev[1] !== 1'bx ) && ( bcd_hundred_prev[1] !== bcd_hundred_expected_prev[1] )
		&& ((bcd_hundred_expected_prev[1] !== last_bcd_hundred_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_hundred[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_hundred_expected_prev);
		$display ("     Real value = %b", bcd_hundred_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_hundred_exp[1] = bcd_hundred_expected_prev[1];
	end
	if (
		( bcd_hundred_expected_prev[2] !== 1'bx ) && ( bcd_hundred_prev[2] !== bcd_hundred_expected_prev[2] )
		&& ((bcd_hundred_expected_prev[2] !== last_bcd_hundred_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_hundred[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_hundred_expected_prev);
		$display ("     Real value = %b", bcd_hundred_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_hundred_exp[2] = bcd_hundred_expected_prev[2];
	end
	if (
		( bcd_hundred_expected_prev[3] !== 1'bx ) && ( bcd_hundred_prev[3] !== bcd_hundred_expected_prev[3] )
		&& ((bcd_hundred_expected_prev[3] !== last_bcd_hundred_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_hundred[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_hundred_expected_prev);
		$display ("     Real value = %b", bcd_hundred_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_hundred_exp[3] = bcd_hundred_expected_prev[3];
	end
	if (
		( bcd_ten_expected_prev[0] !== 1'bx ) && ( bcd_ten_prev[0] !== bcd_ten_expected_prev[0] )
		&& ((bcd_ten_expected_prev[0] !== last_bcd_ten_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_ten[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_ten_expected_prev);
		$display ("     Real value = %b", bcd_ten_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd_ten_exp[0] = bcd_ten_expected_prev[0];
	end
	if (
		( bcd_ten_expected_prev[1] !== 1'bx ) && ( bcd_ten_prev[1] !== bcd_ten_expected_prev[1] )
		&& ((bcd_ten_expected_prev[1] !== last_bcd_ten_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_ten[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_ten_expected_prev);
		$display ("     Real value = %b", bcd_ten_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd_ten_exp[1] = bcd_ten_expected_prev[1];
	end
	if (
		( bcd_ten_expected_prev[2] !== 1'bx ) && ( bcd_ten_prev[2] !== bcd_ten_expected_prev[2] )
		&& ((bcd_ten_expected_prev[2] !== last_bcd_ten_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_ten[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_ten_expected_prev);
		$display ("     Real value = %b", bcd_ten_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd_ten_exp[2] = bcd_ten_expected_prev[2];
	end
	if (
		( bcd_ten_expected_prev[3] !== 1'bx ) && ( bcd_ten_prev[3] !== bcd_ten_expected_prev[3] )
		&& ((bcd_ten_expected_prev[3] !== last_bcd_ten_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_ten[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_ten_expected_prev);
		$display ("     Real value = %b", bcd_ten_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd_ten_exp[3] = bcd_ten_expected_prev[3];
	end
	if (
		( bcd_unit_expected_prev[0] !== 1'bx ) && ( bcd_unit_prev[0] !== bcd_unit_expected_prev[0] )
		&& ((bcd_unit_expected_prev[0] !== last_bcd_unit_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_unit[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_unit_expected_prev);
		$display ("     Real value = %b", bcd_unit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bcd_unit_exp[0] = bcd_unit_expected_prev[0];
	end
	if (
		( bcd_unit_expected_prev[1] !== 1'bx ) && ( bcd_unit_prev[1] !== bcd_unit_expected_prev[1] )
		&& ((bcd_unit_expected_prev[1] !== last_bcd_unit_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_unit[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_unit_expected_prev);
		$display ("     Real value = %b", bcd_unit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bcd_unit_exp[1] = bcd_unit_expected_prev[1];
	end
	if (
		( bcd_unit_expected_prev[2] !== 1'bx ) && ( bcd_unit_prev[2] !== bcd_unit_expected_prev[2] )
		&& ((bcd_unit_expected_prev[2] !== last_bcd_unit_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_unit[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_unit_expected_prev);
		$display ("     Real value = %b", bcd_unit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bcd_unit_exp[2] = bcd_unit_expected_prev[2];
	end
	if (
		( bcd_unit_expected_prev[3] !== 1'bx ) && ( bcd_unit_prev[3] !== bcd_unit_expected_prev[3] )
		&& ((bcd_unit_expected_prev[3] !== last_bcd_unit_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_unit[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_unit_expected_prev);
		$display ("     Real value = %b", bcd_unit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bcd_unit_exp[3] = bcd_unit_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module BCD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] binaryin;
// wires                                               
wire [3:0] bcd_hundred;
wire [3:0] bcd_ten;
wire [3:0] bcd_unit;

wire sampler;                             

// assign statements (if any)                          
BCD i1 (
// port map - connection between master ports and signals/registers   
	.bcd_hundred(bcd_hundred),
	.bcd_ten(bcd_ten),
	.bcd_unit(bcd_unit),
	.binaryin(binaryin)
);
// binaryin[ 7 ]
initial
begin
	binaryin[7] = 1'b1;
end 
// binaryin[ 6 ]
initial
begin
	binaryin[6] = 1'b0;
end 
// binaryin[ 5 ]
initial
begin
	binaryin[5] = 1'b1;
end 
// binaryin[ 4 ]
initial
begin
	binaryin[4] = 1'b0;
end 
// binaryin[ 3 ]
initial
begin
	binaryin[3] = 1'b0;
end 
// binaryin[ 2 ]
initial
begin
	binaryin[2] = 1'b0;
end 
// binaryin[ 1 ]
initial
begin
	binaryin[1] = 1'b1;
end 
// binaryin[ 0 ]
initial
begin
	binaryin[0] = 1'b0;
end 

BCD_vlg_sample_tst tb_sample (
	.binaryin(binaryin),
	.sampler_tx(sampler)
);

BCD_vlg_check_tst tb_out(
	.bcd_hundred(bcd_hundred),
	.bcd_ten(bcd_ten),
	.bcd_unit(bcd_unit),
	.sampler_rx(sampler)
);
endmodule

