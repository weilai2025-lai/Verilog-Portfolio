// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/27/2025 16:38:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    shiftreg
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module shiftreg_vlg_sample_tst(
	clk,
	din,
	rst_p,
	sw,
	sampler_tx
);
input  clk;
input  din;
input  rst_p;
input  sw;
output sampler_tx;

reg sample;
time current_time;
always @(clk or din or rst_p or sw)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module shiftreg_vlg_check_tst (
	pout,
	sout,
	sampler_rx
);
input [7:0] pout;
input  sout;
input sampler_rx;

reg [7:0] pout_expected;
reg  sout_expected;

reg [7:0] pout_prev;
reg  sout_prev;

reg [7:0] pout_expected_prev;
reg  sout_expected_prev;

reg [7:0] last_pout_exp;
reg  last_sout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	pout_prev = pout;
	sout_prev = sout;
end

// update expected /o prevs

always @(trigger)
begin
	pout_expected_prev = pout_expected;
	sout_expected_prev = sout_expected;
end


// expected pout[ 7 ]
initial
begin
	pout_expected[7] = 1'bX;
end 
// expected pout[ 6 ]
initial
begin
	pout_expected[6] = 1'bX;
end 
// expected pout[ 5 ]
initial
begin
	pout_expected[5] = 1'bX;
end 
// expected pout[ 4 ]
initial
begin
	pout_expected[4] = 1'bX;
end 
// expected pout[ 3 ]
initial
begin
	pout_expected[3] = 1'bX;
end 
// expected pout[ 2 ]
initial
begin
	pout_expected[2] = 1'bX;
end 
// expected pout[ 1 ]
initial
begin
	pout_expected[1] = 1'bX;
end 
// expected pout[ 0 ]
initial
begin
	pout_expected[0] = 1'bX;
end 

// expected sout
initial
begin
	sout_expected = 1'bX;
end 
// generate trigger
always @(pout_expected or pout or sout_expected or sout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected pout = %b | expected sout = %b | ",pout_expected_prev,sout_expected_prev);
	$display("| real pout = %b | real sout = %b | ",pout_prev,sout_prev);
`endif
	if (
		( pout_expected_prev[0] !== 1'bx ) && ( pout_prev[0] !== pout_expected_prev[0] )
		&& ((pout_expected_prev[0] !== last_pout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pout_expected_prev);
		$display ("     Real value = %b", pout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pout_exp[0] = pout_expected_prev[0];
	end
	if (
		( pout_expected_prev[1] !== 1'bx ) && ( pout_prev[1] !== pout_expected_prev[1] )
		&& ((pout_expected_prev[1] !== last_pout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pout_expected_prev);
		$display ("     Real value = %b", pout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pout_exp[1] = pout_expected_prev[1];
	end
	if (
		( pout_expected_prev[2] !== 1'bx ) && ( pout_prev[2] !== pout_expected_prev[2] )
		&& ((pout_expected_prev[2] !== last_pout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pout_expected_prev);
		$display ("     Real value = %b", pout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pout_exp[2] = pout_expected_prev[2];
	end
	if (
		( pout_expected_prev[3] !== 1'bx ) && ( pout_prev[3] !== pout_expected_prev[3] )
		&& ((pout_expected_prev[3] !== last_pout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pout_expected_prev);
		$display ("     Real value = %b", pout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pout_exp[3] = pout_expected_prev[3];
	end
	if (
		( pout_expected_prev[4] !== 1'bx ) && ( pout_prev[4] !== pout_expected_prev[4] )
		&& ((pout_expected_prev[4] !== last_pout_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pout_expected_prev);
		$display ("     Real value = %b", pout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pout_exp[4] = pout_expected_prev[4];
	end
	if (
		( pout_expected_prev[5] !== 1'bx ) && ( pout_prev[5] !== pout_expected_prev[5] )
		&& ((pout_expected_prev[5] !== last_pout_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pout_expected_prev);
		$display ("     Real value = %b", pout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pout_exp[5] = pout_expected_prev[5];
	end
	if (
		( pout_expected_prev[6] !== 1'bx ) && ( pout_prev[6] !== pout_expected_prev[6] )
		&& ((pout_expected_prev[6] !== last_pout_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pout_expected_prev);
		$display ("     Real value = %b", pout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pout_exp[6] = pout_expected_prev[6];
	end
	if (
		( pout_expected_prev[7] !== 1'bx ) && ( pout_prev[7] !== pout_expected_prev[7] )
		&& ((pout_expected_prev[7] !== last_pout_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pout_expected_prev);
		$display ("     Real value = %b", pout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pout_exp[7] = pout_expected_prev[7];
	end
	if (
		( sout_expected_prev !== 1'bx ) && ( sout_prev !== sout_expected_prev )
		&& ((sout_expected_prev !== last_sout_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sout_expected_prev);
		$display ("     Real value = %b", sout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sout_exp = sout_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module shiftreg_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg din;
reg rst_p;
reg sw;
// wires                                               
wire [7:0] pout;
wire sout;

wire sampler;                             

// assign statements (if any)                          
shiftreg i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.din(din),
	.pout(pout),
	.rst_p(rst_p),
	.sout(sout),
	.sw(sw)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// din
initial
begin
	din = 1'b0;
	din = #10000 1'b1;
	din = #10000 1'b0;
	din = #20000 1'b1;
	din = #60000 1'b0;
	din = #180000 1'b1;
	din = #10000 1'b0;
	din = #50000 1'b1;
	din = #10000 1'b0;
	din = #10000 1'b1;
	din = #30000 1'b0;
	din = #10000 1'b1;
	din = #20000 1'b0;
end 

// sw
initial
begin
	sw = 1'b1;
	sw = #420000 1'b0;
end 

// rst_p
initial
begin
	rst_p = 1'b1;
	rst_p = #10000 1'b0;
end 

shiftreg_vlg_sample_tst tb_sample (
	.clk(clk),
	.din(din),
	.rst_p(rst_p),
	.sw(sw),
	.sampler_tx(sampler)
);

shiftreg_vlg_check_tst tb_out(
	.pout(pout),
	.sout(sout),
	.sampler_rx(sampler)
);
endmodule

